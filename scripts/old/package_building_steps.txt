1. open gitbash
2. cd to ~?SEND-RAG
3. poetry init
4. Create folders and files using Git Bash:
5. mkdir sendrag api ui tests
6. touch sendrag/__init__.py
7. touch sendrag/data_loader.py sendrag/embedder.py sendrag/vector_store.py sendrag/retrieval.py sendrag/chat.py
8. touch api/server.py
9. touch ui/app.py
10. touch README.md
11. poetry install
12. paste all the codes in .py files
13. poetry add fastapi uvicorn streamlit faiss-cpu sentence-transformers PyPDF2 openai
14. poetry add transformers faiss-cpu torch flask numpy scikit-learn #  runtime dependencies (i.e., packages your app needs to function)
15. poetry add --group dev black pytest mypy flake8 # This adds development tools only used during coding/testing, not in production
16. poetry run uvicorn api.server:app --reload ( here got errors)............

17. need to install a package using pip 

## poetry shell (This will open a new shell session where the virtual environment is active)
pip install transformers==4.49.0
pip install accelerate==1.6.0

18. poetry run uvicorn api.server:app --reload (in terminal)
------------ streamlit run ui/app.py


## at mac##

brew install poetry ( from global directory)
# check the package structur by """ tree -L 2" from sendrag directory 
  ---------- tree -L 2"
  ----------- head -n 10 ui/app.py

# at Sendrag directory 
    --- poetry install 
    --- poetry env info --path (Check where the Poetry-managed environment lives: )
    ---  source /Users/amin/Library/Caches/pypoetry/virtualenvs/sendrag-s8hi-jRC-py3.13/bin/activate (activate poetry virtualenvs)
    --- which python ( python directory for the virtualenvs)
  
  
 #AWS--------------------------------------------------------------
    -- A1K2IAZVDON25TE3D3VINB14

SENDRAG/
│
├── sendrag/              # Core logic
│   ├── __init__.py
│   └── app.py            # Core functions/classes
│
├── api/                  # REST API (FastAPI or Flask)
│   └── server.py
│
├── ui/                   # Frontend (Streamlit, Gradio, etc.)
│   └── app.py
│
├── scripts/              # Dev and deployment scripts
│   └── build.py
│
├── data/                 # Static resources (can move to S3 in production)
│
├── models/               # faiss_index.idx, documents.pkl (modularize)
│
├── tests/                # Unit & integration tests
│   └── test_app.py
│
├── pyproject.toml        # Poetry-managed dependencies
├── run_app.py            # Entrypoint script
├── Dockerfile            # For containerizing the app
└── README.md

############################### AWS_specific_settings###############################
# awscli installing in my mac
   -------- brew install awscli
   -------- aws --version  
   -------- aws configure   
   -------- aws s3 ls    
   -------- aws ec2 describe-volumes
   -------- aws s3 ls --summarize --recursive 
   -------- aws sts get-caller-identity 
   -------- 663804041062
  #####----- How to Create an EC2 Instance from the AWS CLI -----------------------
    ----- aws ec2 run-instances "COMMAND WITH VARIAOUS PARAMETERS"
    ---- 
   1. Find the Latest Ubuntu AMI for Your Region
   aws ec2 describe-images \
  --owners 099720109477 \
  --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            "Name=architecture,Values=x86_64" \
            "Name=root-device-type,Values=ebs" \
            "Name=virtualization-type,Values=hvm" \
  --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
  --output text

#$$$$$$$$$$$ output was --- "" ami-0a7d80731ae1b2435  """"

2. Create a Key Pair (if you don't have one yet)

                aws ec2 create-key-pair \
                    --key-name sendrag-ec2-key \
                    --query 'KeyMaterial' \
                    --output text > ~/.ssh/sendrag-ec2-key.pem


               chmod 400 ~/.ssh/sendrag-ec2-key.pem


3. -------------------Create a Security Group---------------------
    ✅ 1. Create the security group:
        aws ec2 create-security-group \
            --group-name sendrag-sg \
            --description "Security group for SENDRAG frontend access" \
            --vpc-id $(aws ec2 describe-vpcs --query "Vpcs[0].VpcId" --output text)

   ✅ 2. Allow SSH (port 22) access:
       aws ec2 authorize-security-group-ingress \
          --group-name sendrag-sg \
          --protocol tcp \
          --port 22 \
          --cidr 0.0.0.0/0
   
   ✅ 3. Allow Streamlit access (port 8501):
       aws ec2 authorize-security-group-ingress \
          --group-name sendrag-sg \
          --protocol tcp \
          --port 8501 \
          --cidr 0.0.0.0/0

#-------------------------------------------------------          
#------------🚀 5. Launch the EC2 Instance
#---------------------------------------------------------
      ✅ Modified EC2 Instance Launch Command:
        aws ec2 run-instances \
          --image-id ami-0a7d80731ae1b2435 \
          --instance-type t2.micro \
          --key-name sendrag-ec2-key \
          --security-groups sendrag-sg \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Sendrag-Frontend}]' \
          --count 1

✅ Get Public IP of Your Instance
# after running the above command, get the instance id and then check the status as 

        ---- aws ec2 describe-instances --instance-ids i-053e9a9503dfd13d5 \
                --query 'Reservations[*].Instances[*].[State.Name,PublicIpAddress]' --output text

                                    ((( aws ec2 describe-instances \
                                          --filters "Name=tag:Name,Values=Sendrag-Frontend" \
                                          --query "Reservations[*].Instances[*].PublicIpAddress" \
                                          --output text
                    )))

 -------------- from the above code, get the public IP address 

✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 

     SSH into your EC2 instance using your key:

        ssh -i ~/.ssh/sendrag-ec2-key.pem ubuntu@18.233.102.148
        
        ✅ ✅ ✅ ✅ ✅ ✅ ✅ press yes then 

# ✅ ✅ ✅ ✅# Then , I created setup_ec2_frontend.sh file in my  ✅ ✅SENDRAG/scripts/  ✅ ✅ directory 
     ✅ ✅ ✅ ✅ Make it executable locally: chmod +x SENDRAG/scripts/setup_ec2_frontend.sh

✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
✅ ✅ ✅ ✅ ✅ ✅ copy the setup_ec2_frontend.sh to ec2 ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 

🔁 Step 1: Copy Script to EC2
From your Mac terminal (not inside the SSH session), use scp to copy the script to the instance:

    --- scp -i ~/.ssh/sendrag-ec2-key.pem SENDRAG/scripts/setup_ec2_frontend.sh ubuntu@18.233.102.148:~

▶️ Step 2: Run Script on EC2
Now switch back to your SSH session, and run the script:
--------  chmod +x setup_ec2_frontend.sh  # just in case
--------- ./setup_ec2_frontend.sh
✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
Perfect — Poetry is installed, but the shell doesn’t know where to find it yet. This is a classic $PATH issue.
Let’s fix it step-by-step:
✅ Step 1: Add Poetry to PATH
 echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
This tells your shell where Poetry lives and reloads the config.

got the SENDRAG directroy and 
vim ~/SENDRAG/pyproject.toml---- python = ">=3.10,<3.14"

---- poetry env use python3

--- poetry lock 

---- poetry install

--- poetry run streamlit run app.py --server.port 8501 --server.address 0.0.0.0

✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
Follwoing above, i got out of memory, so i had kill the instance by this command 

###----------- Stop (kill) your EC2 instance
You need the instance ID first. You can find it in the AWS Console, or run:
 -------    aws ec2 describe-instances --filters "Name=private-dns-name,Values=ip-172-31-90-67.ec2.internal" --query 'Reservations[*].Instances[*].InstanceId' --output text
 {{{{{ output is ----    i-053e9a9503dfd13d5 }}}}}

aws ec2 terminate-instances --instance-ids i-053e9a9503dfd13d5



 # check status 
 aws ec2 describe-instances --instance-ids i-053e9a9503dfd13d5 --query 'Reservations[*].Instances[*].State.Name' --output text



 output -- stopped 
✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
Step 3: Find the root EBS volume attached to the instance
aws ec2 describe-instances --instance-ids i-0abcdef1234567890 --query 'Reservations[*].Instances[*].BlockDeviceMappings[?DeviceName==`/dev/xvda`].Ebs.VolumeId' --output text
#$$$$$$$ get the instance details ---------------
aws ec2 describe-instances --instance-ids i-053e9a9503dfd13d5 --query 'Reservations[*].Instances[*].BlockDeviceMappings' --output json
aws ec2 describe-instances --instance-ids i-053e9a9503dfd13d5 --query 'Reservations[*].Instances[*].State.Name' --output text (check if instance is stopped)

To find the volume ID, run:
aws ec2 describe-instances --instance-ids i-053e9a9503dfd13d5 --query 'Reservations[*].Instances[*].BlockDeviceMappings' --output json

aws ec2 modify-volume --volume-id vol-0d15c9fc5f52c4595 --size 20

aws ec2 start-instances --instance-ids i-053e9a9503dfd13d5 ( restart the instance)

1..  ssh -i ~/.ssh/sendrag-ec2-key.pem ubuntu@3.87.32.217
2.. cd SENDRAG
3..... Poetry install

✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 
✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ ✅ 

# How to delete leftover resources:
Delete EBS volumes: aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=i-053e9a9503dfd13d5

aws ec2 describe-snapshots --owner-ids self
aws ec2 describe-addresses --query 'Addresses[?AssociationId==`null`]'
aws ec2 describe-volumes --filters Name=status,Values=available






